openapi: "3.0.0"
info:
  title: "E-Commerce Auth API"
  description: "Enterprise-grade authentication API"
  version: "1.0.0"

servers:
  - url: "http://localhost:5001"
    description: "Development Server"

paths:
  /api/auth/register:
    post:
      summary: "Register a new user"
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                name:
                  type: string
                  description: "Full name of the user"
                email:
                  type: string
                  format: email
                  example: "user@vibe.com"
                password:
                  type: string
                  minLength: 8
                  description: "Must contain uppercase, number & special character"
      responses:
        201:
          description: "User registered successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        409:
          description: "User already exists"
        500:
          description: "Internal Server Error"

  /api/auth/verify-email:
    get:
      summary: "Verify email address"
      tags:
        - Auth
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
            example: "54663eb5-6256-445b-a3c9-9beee9bf822d"
          description: "Verification token received via email"
      responses:
        200:
          description: "Email verified successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: "Invalid or expired token"
        500:
          description: "Internal Server Error"

  /api/auth/login:
    post:
      summary: "User login"
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@vibe.com"
                password:
                  type: string
                  description: "User password"
                  example: "SecurePass@123"
      responses:
        200:
          description: "Successful login, returns access & refresh tokens"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        401:
          description: "Invalid credentials"
        403:
          description: "Email not verified"

  /api/auth/refresh-token:
    post:
      summary: "Generate a new access token using refresh token"
      tags:
        - Auth
      security:
        - cookieAuth: []
      responses:
        200:
          description: "New access token generated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: "New JWT Access Token (Expires in 15 minutes)"
        403:
          description: "Invalid or missing refresh token"

  /api/auth/forgot-password:
    post:
      summary: "Request password reset email"
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "user@vibe.com"
      responses:
        200:
          description: "Password reset email sent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        404:
          description: "Email not registered"

  /api/auth/reset-password:
    post:
      summary: "Reset password with token"
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resetToken
                - newPassword
              properties:
                resetToken:
                  type: string
                  description: "Token received in email"
                  example: "abcdef123456"
                newPassword:
                  type: string
                  minLength: 8
                  description: "New password"
                  example: "NewPass@123"
      responses:
        200:
          description: "Password reset successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: "Invalid or expired token"

  /api/auth/logout:
    post:
      summary: "Logout and invalidate refresh token"
      tags:
        - Auth
      security:
        - cookieAuth: []
      responses:
        200:
          description: "User successfully logged out"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        403:
          description: "Refresh token missing or invalid"
        500:
          description: "Internal Server Error"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: refreshToken
      description: "Refresh Token stored as HTTP-Only cookie"
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Access Token"

  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
